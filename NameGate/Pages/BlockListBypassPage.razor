@page "/blocklistbypass"

@using GlobExpressions
@using NameGate.Database.Entities
@using NameGate.Database.Repositories

<h3>BlockList Bypassed Hosts</h3>
<p>Add hosts by IP, such as <code>192.168.1.12</code>, <code>192.168.1.*</code>, or by Hostname, such as <code>DESKTOP-ASDFJKL</code>, <code>DESKTOP-*</code>, etc.</p>

@inject IBlockListBypassRepository Repository
@inject ILogger<WhiteList> Logger
 
<div style="display:flex;">
    <MudTextField Label="Add Bypassed Host" @bind-Value="_newBypassHost" Placeholder="Hostname or IP, supports wildcards" /> <MudButton StartIcon="@Icons.Material.Filled.Add" @onclick="AddBypass">Add</MudButton>
</div>

<div>
    @foreach(var bypass in _bypasses)
    {
        <div>@bypass.HostGlob <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="() => RemoveDomainGlob(bypass)">Remove</MudIconButton></div>
    }
</div>

@code {
    private IEnumerable<BlockListBypassEntity> _bypasses = [];

    private string _newBypassHost = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await RefreshList();
    }

    private async Task AddBypass()
    {
        try
        {
            _ = new Glob(_newBypassHost); // to validate

            await Repository.Add(new(Guid.NewGuid(), _newBypassHost));
            _newBypassHost = string.Empty;
            await RefreshList();
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "Error adding whitelist entry.");
        }
    }

    public async Task RemoveDomainGlob(BlockListBypassEntity domainGlob)
    {
        try
        {
            await Repository.Remove(domainGlob.Id);
            await RefreshList();
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "Error removing domain glob.");
        }
    }

    private async Task RefreshList()
    {
        _bypasses = await Repository.Get().ToListAsync();
    }
}
